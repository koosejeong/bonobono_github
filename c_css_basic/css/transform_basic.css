@charset "utf-8";
/* transform_basic */

#contentBox{ width:800px; width:50rem; height:auto; min-height:500px; min-height:31.25rem; }
  .box{ width:100%; height:auto; min-height:100%;  padding:16px; padding:1rem; box-sizing:border-box; background-color:#fd5; border-bottom:2px solid #333; border-bottom:0.125rem solid #333; margin-bottom:5rem; }

  .box>ul{ width:100%; height:auto; }
  .box>ul:after{ content:" "; display:block; width:0; height:0; clear:both; }
  .box>ul>li{ float:left; margin:2rem; width:300px; height:300px; width:18.75rem; height:18.75rem; background-color: #07f; border-radius:1rem; color:#fff; font-weight:bold; }

  /* translate: 위치 이동===================== */
  /* transform속성은 z-index가 먹히지 않는다.  
  transform:translate3D(x, y, z)*/
  .translate li{ transition:all 300ms ease; }
  .translate:hover li{ transition:all 1000ms ease; }
  .translate:hover li:nth-child(1){ transform:translate(400px, -200px);background-color: #aca; z-index:300; }
  .translate:hover li:nth-child(2){ transform:translateX(400px);background-color:#aff; }
  .translate:hover li:nth-child(3){ transform:translateY(-100px);background-color:#f05; }
  .translate:hover li:nth-child(4){ transform:perspective(500px) translate3D(0, -200px, -100px);background-color:#705; }
  
  /* scale: 크기 조절======================= */
  /*  ransform:scale(x, y)의 값을 갖는다.
      값을 하나만 쓸 시 x값만 적용 된다. 
      transform:scale3D(x, y, z)
  */
  .scale:hover li{ transition:all 500ms linear; }
  /* 
    ease: 자연스러운 속도(빨라지다 느려진다)
    ease-in: 점점 빠르게
    ease-out: 점점 느리게
    ease-in-out: 빨라지다 느리게(같은 속도로 빨라졌다 느려져서 다소 부자연스럽다)
    linear: 지속적인, 동일한 속도
  */
  .scale:hover li:nth-child(1){ transform:scale(1.3, 1.5); background-color: #aca; }
  .scale:hover li:nth-child(2){ transform:scaleX(0.5); background-color: #1ca; }
  .scale:hover li:nth-child(3){ transform:scaleY(0.5); background-color: #1ca; }
  .scale:hover li:nth-child(4){ transform:scale3D(2, 2, 1); background-color: #1ff; }

  /* rotate: 각도========================== */
  /* 
    해당 요소에 float값이 있을 시, rotate가 적용 되지 않는 경우도 있다.
  */
  .rotate li{transition:all 700ms ease; }
  .rotate li:nth-child(1):hover{ transform:rotate(719deg); }
  .rotate li:nth-child(2):hover{ transform:perspective(500px) rotateX(45deg); }
  .rotate li:nth-child(3):hover{ transform:perspective(500px) rotateY(45deg); }
  .rotate li:nth-child(4):hover{ transform:rotate3D(1, 2, 2, -45deg); }

  /* skew: 모양을 비트는 기능======================== */
  .skew li:nth-child(1){ transform:skew(-45deg, 15deg); }
  .skew li:nth-child(2){ transform:skewX(-45deg); }
  .skew li:nth-child(3){ transform:skewY(-45deg); }
  .skew li:nth-child(4){ transform:skewX(-45deg); background-color: #a66; font-size:20px; text-align:center; }
  .skew li:nth-child(4)>span{ display:block; transform:skewX(45deg); }

  /*  origin: 형태 변형 시 기준점을 잡아주는 기능==========*/
  /* 
    동일한 속성명은 두 번 적지 않는다. (속성값을 몰아 적는다)
  */
  .origin{ background-color: #dfd; }
  .origin li{ transition:all 500ms ease; }
  .origin li:nth-child(1){ transform-origin:0 0; }
  .origin li:nth-child(1):hover{ transform:rotate(45deg) skew(45deg); }
  .origin li:nth-child(2):hover{ transform:translate(500px, 400px) rotate(45deg) scale(1.5); }

  /* perspective: 어디를 기준으로 원근법을 적용 시킬지 정해주는 기능 */
  /* 
    perspective는 transform 속성값으로도 주어질 수 있다.
  */
  .perspective{ margin-bottom:100rem;}
  .perspective >ul>li{ width:100px; height:170px; background-color: #0ac;}
  .perspective >ul{perspective:200px; }
  .perspective >ul>li:nth-child(1){ transform:rotateY(60deg); }
  .perspective >ul>li:nth-child(2){ transform:rotateY(30deg); }
  .perspective >ul>li:nth-child(3){ transform:rotateY(-30deg); }
  .perspective >ul>li:nth-child(4){ transform:rotateY(-60deg); }